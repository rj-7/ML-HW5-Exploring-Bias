{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":8208545,"sourceType":"datasetVersion","datasetId":4864172}],"dockerImageVersionId":30698,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"import os\nimport numpy as np\nimport pandas as pd\nimport seaborn as sn\nfrom tqdm import tqdm\nimport tensorflow as tf\nimport matplotlib.pyplot as plt\nimport math\nimport random\nimport time\nimport keras\nfrom keras.datasets import cifar10\nfrom keras.utils import to_categorical\nfrom keras import models, layers, optimizers, regularizers\nfrom keras.models import Model, Sequential\nfrom keras.layers import Dense, Dropout, Conv2D, MaxPooling2D, Flatten\nfrom skimage.color import rgb2gray\nimport sklearn\nfrom sklearn import model_selection, preprocessing\nfrom scipy import stats","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","execution":{"iopub.status.busy":"2024-04-26T01:52:04.318984Z","iopub.execute_input":"2024-04-26T01:52:04.320114Z","iopub.status.idle":"2024-04-26T01:52:18.865594Z","shell.execute_reply.started":"2024-04-26T01:52:04.320072Z","shell.execute_reply":"2024-04-26T01:52:18.864089Z"},"trusted":true},"execution_count":1,"outputs":[{"name":"stderr","text":"2024-04-26 01:52:08.654922: E external/local_xla/xla/stream_executor/cuda/cuda_dnn.cc:9261] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered\n2024-04-26 01:52:08.655036: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:607] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered\n2024-04-26 01:52:08.811210: E external/local_xla/xla/stream_executor/cuda/cuda_blas.cc:1515] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered\n","output_type":"stream"}]},{"cell_type":"markdown","source":"# Load and explore dataset","metadata":{}},{"cell_type":"code","source":"wd = '/kaggle/input/woz-speech/'\n#Set training and test folder paths\ntraining_path = wd+'features_train/features_train'\ntest_path = wd+'features_test/features_test'\n\n#Load labels file\nlabels = pd.read_csv(wd+'labels.csv')\n\n#Load feature description files, take out column 0 to use as header for training/test sets\nfeatures = pd.read_csv(wd+'feature_description.csv', encoding_errors='ignore', header=None, index_col=0)\nfeatures = features.index.tolist()\nfeatures","metadata":{"execution":{"iopub.status.busy":"2024-04-26T01:53:21.005834Z","iopub.execute_input":"2024-04-26T01:53:21.006223Z","iopub.status.idle":"2024-04-26T01:53:21.095816Z","shell.execute_reply.started":"2024-04-26T01:53:21.006194Z","shell.execute_reply":"2024-04-26T01:53:21.094495Z"},"trusted":true},"execution_count":2,"outputs":[{"execution_count":2,"output_type":"execute_result","data":{"text/plain":"['F0semitoneFrom27.5Hz_sma3nz_amean',\n 'F0semitoneFrom27.5Hz_sma3nz_stddevNorm',\n 'F0semitoneFrom27.5Hz_sma3nz_percentile20.0',\n 'F0semitoneFrom27.5Hz_sma3nz_percentile50.0',\n 'F0semitoneFrom27.5Hz_sma3nz_percentile80.0',\n 'F0semitoneFrom27.5Hz_sma3nz_pctlrange0-2',\n 'F0semitoneFrom27.5Hz_sma3nz_meanRisingSlope',\n 'F0semitoneFrom27.5Hz_sma3nz_stddevRisingSlope',\n 'F0semitoneFrom27.5Hz_sma3nz_meanFallingSlope',\n 'F0semitoneFrom27.5Hz_sma3nz_stddevFallingSlope',\n 'loudness_sma3_amean',\n 'loudness_sma3_stddevNorm',\n 'loudness_sma3_percentile20.0',\n 'loudness_sma3_percentile50.0',\n 'loudness_sma3_percentile80.0',\n 'loudness_sma3_pctlrange0-2',\n 'loudness_sma3_meanRisingSlope',\n 'loudness_sma3_stddevRisingSlope',\n 'loudness_sma3_meanFallingSlope',\n 'loudness_sma3_stddevFallingSlope',\n 'spectralFlux_sma3_amean',\n 'spectralFlux_sma3_stddevNorm',\n 'mfcc1_sma3_amean',\n 'mfcc1_sma3_stddevNorm',\n 'mfcc2_sma3_amean',\n 'mfcc2_sma3_stddevNorm',\n 'mfcc3_sma3_amean',\n 'mfcc3_sma3_stddevNorm',\n 'mfcc4_sma3_amean',\n 'mfcc4_sma3_stddevNorm',\n 'jitterLocal_sma3nz_amean',\n 'jitterLocal_sma3nz_stddevNorm',\n 'shimmerLocaldB_sma3nz_amean',\n 'shimmerLocaldB_sma3nz_stddevNorm',\n 'HNRdBACF_sma3nz_amean',\n 'HNRdBACF_sma3nz_stddevNorm',\n 'logRelF0-H1-H2_sma3nz_amean',\n 'logRelF0-H1-H2_sma3nz_stddevNorm',\n 'logRelF0-H1-A3_sma3nz_amean',\n 'logRelF0-H1-A3_sma3nz_stddevNorm',\n 'F1frequency_sma3nz_amean',\n 'F1frequency_sma3nz_stddevNorm',\n 'F1bandwidth_sma3nz_amean',\n 'F1bandwidth_sma3nz_stddevNorm',\n 'F1amplitudeLogRelF0_sma3nz_amean',\n 'F1amplitudeLogRelF0_sma3nz_stddevNorm',\n 'F2frequency_sma3nz_amean',\n 'F2frequency_sma3nz_stddevNorm',\n 'F2bandwidth_sma3nz_amean',\n 'F2bandwidth_sma3nz_stddevNorm',\n 'F2amplitudeLogRelF0_sma3nz_amean',\n 'F2amplitudeLogRelF0_sma3nz_stddevNorm',\n 'F3frequency_sma3nz_amean',\n 'F3frequency_sma3nz_stddevNorm',\n 'F3bandwidth_sma3nz_amean',\n 'F3bandwidth_sma3nz_stddevNorm',\n 'F3amplitudeLogRelF0_sma3nz_amean',\n 'F3amplitudeLogRelF0_sma3nz_stddevNorm',\n 'alphaRatioV_sma3nz_amean',\n 'alphaRatioV_sma3nz_stddevNorm',\n 'hammarbergIndexV_sma3nz_amean',\n 'hammarbergIndexV_sma3nz_stddevNorm',\n 'slopeV0-500_sma3nz_amean',\n 'slopeV0-500_sma3nz_stddevNorm',\n 'slopeV500-1500_sma3nz_amean',\n 'slopeV500-1500_sma3nz_stddevNorm',\n 'spectralFluxV_sma3nz_amean',\n 'spectralFluxV_sma3nz_stddevNorm',\n 'mfcc1V_sma3nz_amean',\n 'mfcc1V_sma3nz_stddevNorm',\n 'mfcc2V_sma3nz_amean',\n 'mfcc2V_sma3nz_stddevNorm',\n 'mfcc3V_sma3nz_amean',\n 'mfcc3V_sma3nz_stddevNorm',\n 'mfcc4V_sma3nz_amean',\n 'mfcc4V_sma3nz_stddevNorm',\n 'alphaRatioUV_sma3nz_amean',\n 'hammarbergIndexUV_sma3nz_amean',\n 'slopeUV0-500_sma3nz_amean',\n 'slopeUV500-1500_sma3nz_amean',\n 'spectralFluxUV_sma3nz_amean',\n 'loudnessPeaksPerSec',\n 'VoicedSegmentsPerSec',\n 'MeanVoicedSegmentLengthSec',\n 'StddevVoicedSegmentLengthSec',\n 'MeanUnvoicedSegmentLength',\n 'StddevUnvoicedSegmentLength',\n 'equivalentSoundLevel_dBp']"},"metadata":{}}]},{"cell_type":"code","source":"def load_data(folder_path):\n    #Init empty dataframe\n    res = pd.DataFrame()\n    for file in os.listdir(folder_path):\n        #for each speaker file\n        if file.endswith('.csv'):\n            #get participant id from filename, eg filename: 'spk_305.csv'\n            participant = float(file.split('_')[1].split('.')[0])\n            #find labels for the participant\n            label = labels[labels['Participant_ID'] == participant]\n            #load participant feature file\n            file_path = os.path.join(folder_path, file)\n            data_df = pd.read_csv(file_path, header=None, names=features)\n            #Add labels and participant id columns\n            data_df['participant'] = participant\n            data_df['gender'] = label['Gender'].values[0]\n            data_df['depression'] = label['Depression'].values[0]\n            #combine everything to result\n            res = pd.concat([res, data_df])\n    return res","metadata":{"execution":{"iopub.status.busy":"2024-04-26T02:04:55.350903Z","iopub.execute_input":"2024-04-26T02:04:55.351287Z","iopub.status.idle":"2024-04-26T02:04:55.359754Z","shell.execute_reply.started":"2024-04-26T02:04:55.351258Z","shell.execute_reply":"2024-04-26T02:04:55.358341Z"},"trusted":true},"execution_count":4,"outputs":[]},{"cell_type":"code","source":"#Load training data\ntraining_df = load_data(training_path)\nlen(training_df)","metadata":{"execution":{"iopub.status.busy":"2024-04-26T02:04:58.516765Z","iopub.execute_input":"2024-04-26T02:04:58.517086Z","iopub.status.idle":"2024-04-26T02:04:59.918387Z","shell.execute_reply.started":"2024-04-26T02:04:58.517065Z","shell.execute_reply":"2024-04-26T02:04:59.917021Z"},"trusted":true},"execution_count":5,"outputs":[{"execution_count":5,"output_type":"execute_result","data":{"text/plain":"13626"},"metadata":{}}]},{"cell_type":"code","source":"#Load test data\ntest_df = load_data(test_path)\nlen(test_df)","metadata":{"execution":{"iopub.status.busy":"2024-04-26T02:05:03.518291Z","iopub.execute_input":"2024-04-26T02:05:03.518661Z","iopub.status.idle":"2024-04-26T02:05:03.835506Z","shell.execute_reply.started":"2024-04-26T02:05:03.518638Z","shell.execute_reply":"2024-04-26T02:05:03.834353Z"},"trusted":true},"execution_count":6,"outputs":[{"execution_count":6,"output_type":"execute_result","data":{"text/plain":"3280"},"metadata":{}}]},{"cell_type":"code","source":"# Check Missing values\nmissing_values = (training_df.isnull().sum()/len(training_df)) *100\nprint(f'Missing value percent % for each column, total samples {len(training_df)}')\nprint(missing_values)","metadata":{"execution":{"iopub.status.busy":"2024-04-26T02:05:06.080775Z","iopub.execute_input":"2024-04-26T02:05:06.081145Z","iopub.status.idle":"2024-04-26T02:05:06.095273Z","shell.execute_reply.started":"2024-04-26T02:05:06.081122Z","shell.execute_reply":"2024-04-26T02:05:06.093991Z"},"trusted":true},"execution_count":7,"outputs":[{"name":"stdout","text":"Missing value percent % for each column, total samples 13626\nF0semitoneFrom27.5Hz_sma3nz_amean             0.007339\nF0semitoneFrom27.5Hz_sma3nz_stddevNorm        0.007339\nF0semitoneFrom27.5Hz_sma3nz_percentile20.0    0.007339\nF0semitoneFrom27.5Hz_sma3nz_percentile50.0    0.007339\nF0semitoneFrom27.5Hz_sma3nz_percentile80.0    0.007339\n                                                ...   \nStddevUnvoicedSegmentLength                   0.007339\nequivalentSoundLevel_dBp                      0.007339\nparticipant                                   0.000000\ngender                                        0.000000\ndepression                                    0.000000\nLength: 91, dtype: float64\n","output_type":"stream"}]},{"cell_type":"code","source":"training_df = training_df.dropna()\nlen(training_df)","metadata":{"execution":{"iopub.status.busy":"2024-04-26T02:05:09.557107Z","iopub.execute_input":"2024-04-26T02:05:09.557437Z","iopub.status.idle":"2024-04-26T02:05:09.568808Z","shell.execute_reply.started":"2024-04-26T02:05:09.557415Z","shell.execute_reply":"2024-04-26T02:05:09.567623Z"},"trusted":true},"execution_count":8,"outputs":[{"execution_count":8,"output_type":"execute_result","data":{"text/plain":"13625"},"metadata":{}}]},{"cell_type":"markdown","source":"There was only one row with null values so I think we're good to drop that row.","metadata":{}},{"cell_type":"markdown","source":"Designating subjects as validation vs training subjects","metadata":{}},{"cell_type":"code","source":"def val_split(df: pd.DataFrame):\n    df['participant'] = df['participant'].astype(int)\n    n = np.unique(df['participant'])\n    n_range = range(min(n), max(n))\n    train_subs = random.sample(n_range, math.floor(len(n)*0.75))\n    train = df[df['participant'].isin(train_subs)]\n    val = df[~df['participant'].isin(train_subs)]\n    return train, val","metadata":{"execution":{"iopub.status.busy":"2024-04-26T02:49:59.761587Z","iopub.execute_input":"2024-04-26T02:49:59.761968Z","iopub.status.idle":"2024-04-26T02:49:59.768052Z","shell.execute_reply.started":"2024-04-26T02:49:59.761937Z","shell.execute_reply":"2024-04-26T02:49:59.767087Z"},"trusted":true},"execution_count":34,"outputs":[]},{"cell_type":"code","source":"train, val = val_split(training_df)","metadata":{"execution":{"iopub.status.busy":"2024-04-26T02:51:55.196447Z","iopub.execute_input":"2024-04-26T02:51:55.196815Z","iopub.status.idle":"2024-04-26T02:51:55.209604Z","shell.execute_reply.started":"2024-04-26T02:51:55.196792Z","shell.execute_reply":"2024-04-26T02:51:55.207983Z"},"trusted":true},"execution_count":38,"outputs":[]},{"cell_type":"code","source":"#Used to split into our features and our outcomes for this task\ndef x_y_split(df: pd.DataFrame):\n    x = df.drop(['participant', 'gender', 'depression'], axis = 1)\n    gender = df['gender']\n    depression = df['depression']\n    return x, gender, depression","metadata":{"execution":{"iopub.status.busy":"2024-04-26T03:00:12.165449Z","iopub.execute_input":"2024-04-26T03:00:12.165811Z","iopub.status.idle":"2024-04-26T03:00:12.170726Z","shell.execute_reply.started":"2024-04-26T03:00:12.165789Z","shell.execute_reply":"2024-04-26T03:00:12.169796Z"},"trusted":true},"execution_count":40,"outputs":[]},{"cell_type":"markdown","source":"# Feature selection","metadata":{}},{"cell_type":"markdown","source":"Running PCA to find the principal components and then choosing the components that best predict gender.","metadata":{}},{"cell_type":"code","source":"from sklearn.decomposition import PCA\nfrom sklearn.feature_selection import SelectKBest","metadata":{"execution":{"iopub.status.busy":"2024-04-26T02:17:14.953715Z","iopub.execute_input":"2024-04-26T02:17:14.954106Z","iopub.status.idle":"2024-04-26T02:17:15.015123Z","shell.execute_reply.started":"2024-04-26T02:17:14.954076Z","shell.execute_reply":"2024-04-26T02:17:15.014109Z"},"trusted":true},"execution_count":10,"outputs":[]},{"cell_type":"code","source":"class pca(PCA):\n    def __init__(self, X):\n        super().__init__()\n        self.X = X\n    \n    def run_pca(self):\n        #Find all PCs for the data\n        self.fit(self.X)\n        #Transform the data into the new feature space\n        self.X_transformed = self.transform(self.X)\n    \n    def best_PCs(self, Y, k):\n        #Find the best components for predicting an outcome\n        return SelectKBest(k=k).fit_transform(self.X, Y)\n        ","metadata":{"execution":{"iopub.status.busy":"2024-04-26T03:20:30.349222Z","iopub.execute_input":"2024-04-26T03:20:30.350210Z","iopub.status.idle":"2024-04-26T03:20:30.356138Z","shell.execute_reply.started":"2024-04-26T03:20:30.350164Z","shell.execute_reply":"2024-04-26T03:20:30.355085Z"},"trusted":true},"execution_count":67,"outputs":[]},{"cell_type":"code","source":"x_train, g_train, d_train = x_y_split(train)\nx_val, g_val, d_val = x_y_split(val)","metadata":{"execution":{"iopub.status.busy":"2024-04-26T03:21:00.518587Z","iopub.execute_input":"2024-04-26T03:21:00.518941Z","iopub.status.idle":"2024-04-26T03:21:00.526158Z","shell.execute_reply.started":"2024-04-26T03:21:00.518917Z","shell.execute_reply":"2024-04-26T03:21:00.524700Z"},"trusted":true},"execution_count":69,"outputs":[]},{"cell_type":"code","source":"pca = pca(x_train)\npca.run_pca()\ng_best = pca.best_PCs(g_train, 5)\nd_best = pca.best_PCs(d_train, 5)","metadata":{"execution":{"iopub.status.busy":"2024-04-26T03:21:03.316693Z","iopub.execute_input":"2024-04-26T03:21:03.317011Z","iopub.status.idle":"2024-04-26T03:21:03.364382Z","shell.execute_reply.started":"2024-04-26T03:21:03.316990Z","shell.execute_reply":"2024-04-26T03:21:03.362629Z"},"trusted":true},"execution_count":70,"outputs":[{"traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mTypeError\u001b[0m                                 Traceback (most recent call last)","Cell \u001b[0;32mIn[70], line 1\u001b[0m\n\u001b[0;32m----> 1\u001b[0m pca \u001b[38;5;241m=\u001b[39m \u001b[43mpca\u001b[49m\u001b[43m(\u001b[49m\u001b[43mx_train\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m      2\u001b[0m pca\u001b[38;5;241m.\u001b[39mrun_pca()\n\u001b[1;32m      3\u001b[0m g_best \u001b[38;5;241m=\u001b[39m pca\u001b[38;5;241m.\u001b[39mbest_PCs(g_train, \u001b[38;5;241m5\u001b[39m)\n","Cell \u001b[0;32mIn[67], line 3\u001b[0m, in \u001b[0;36mpca.__init__\u001b[0;34m(self, X)\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21m__init__\u001b[39m(\u001b[38;5;28mself\u001b[39m, X):\n\u001b[0;32m----> 3\u001b[0m     \u001b[38;5;28;43msuper\u001b[39;49m\u001b[43m(\u001b[49m\u001b[43m)\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[38;5;21;43m__init__\u001b[39;49m\u001b[43m(\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m      4\u001b[0m     \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mX \u001b[38;5;241m=\u001b[39m X\n","\u001b[0;31mTypeError\u001b[0m: PCA.__init__() missing 1 required positional argument: 'X'"],"ename":"TypeError","evalue":"PCA.__init__() missing 1 required positional argument: 'X'","output_type":"error"}]},{"cell_type":"markdown","source":"Create a logistic regression from ","metadata":{}},{"cell_type":"code","source":"","metadata":{"execution":{"iopub.status.busy":"2024-04-26T03:15:32.158110Z","iopub.execute_input":"2024-04-26T03:15:32.158466Z","iopub.status.idle":"2024-04-26T03:15:32.188157Z","shell.execute_reply.started":"2024-04-26T03:15:32.158438Z","shell.execute_reply":"2024-04-26T03:15:32.186615Z"},"trusted":true},"execution_count":66,"outputs":[{"traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mAttributeError\u001b[0m                            Traceback (most recent call last)","Cell \u001b[0;32mIn[66], line 1\u001b[0m\n\u001b[0;32m----> 1\u001b[0m \u001b[43mg_best\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_scores\u001b[49m\n","\u001b[0;31mAttributeError\u001b[0m: 'numpy.ndarray' object has no attribute '_scores'"],"ename":"AttributeError","evalue":"'numpy.ndarray' object has no attribute '_scores'","output_type":"error"}]},{"cell_type":"code","source":"#Intercorrelation matrix\ncorrs = training_df.corr()\nsn.heatmap(corrs)","metadata":{"execution":{"iopub.status.busy":"2024-04-24T18:17:49.314182Z","iopub.execute_input":"2024-04-24T18:17:49.314591Z","iopub.status.idle":"2024-04-24T18:17:50.422767Z","shell.execute_reply.started":"2024-04-24T18:17:49.314561Z","shell.execute_reply":"2024-04-24T18:17:50.421679Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"def find_high_cors(matrix: pd.DataFrame, cutoff: float):\n    high = {'feat1': [], 'feat2': [], 'r': []}\n    for i, row in matrix.iterrows():\n        for j, val in row.items():\n            #assuming here that only mirrored sets of features will have exactly the same r value\n            if val > cutoff and val not in high['r'] and i != j:\n                c = [i, j, val]\n                high['feat1'].append(i)\n                high['feat2'].append(j)\n                high['r'].append(val)\n        \n    return pd.DataFrame(high)","metadata":{"execution":{"iopub.status.busy":"2024-04-24T18:18:06.114749Z","iopub.execute_input":"2024-04-24T18:18:06.115154Z","iopub.status.idle":"2024-04-24T18:18:06.122987Z","shell.execute_reply.started":"2024-04-24T18:18:06.115123Z","shell.execute_reply":"2024-04-24T18:18:06.120952Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"high = find_high_cors(corrs, 0.9)","metadata":{"execution":{"iopub.status.busy":"2024-04-24T18:18:08.778299Z","iopub.execute_input":"2024-04-24T18:18:08.778746Z","iopub.status.idle":"2024-04-24T18:18:08.790656Z","shell.execute_reply.started":"2024-04-24T18:18:08.778712Z","shell.execute_reply":"2024-04-24T18:18:08.789560Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"high","metadata":{"execution":{"iopub.status.busy":"2024-04-24T18:18:10.858610Z","iopub.execute_input":"2024-04-24T18:18:10.859014Z","iopub.status.idle":"2024-04-24T18:18:10.876104Z","shell.execute_reply.started":"2024-04-24T18:18:10.858983Z","shell.execute_reply":"2024-04-24T18:18:10.875036Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"Run a t-test for each feature for sex and depression groups to see which of the correlated features should be removed.","metadata":{}},{"cell_type":"code","source":"def feat_t(data: pd.DataFrame, IV: str):\n    split_0 = data[data[IV] == 0]\n    split_1 = data[data[IV] == 1]\n    pred = {'feat':[], 't': [], 'p':[]}\n    not_pred = {'feat':[], 't': [], 'p':[]}\n    for feat in data.columns:\n        if feat == IV:\n            continue\n        t, p = stats.ttest_ind(split_0[feat], split_1[feat])\n        if p < .001:\n            p = str(p) + '***'\n        elif p < .01:\n            p = str(p) + '**'\n        elif p < .05:\n            p = str(p) + '*'\n        elif p < .1:\n            p = str(p) + '.'\n        else:\n            not_pred['feat'].append(feat)\n            not_pred['t'].append(t)\n            not_pred['p'].append(p)\n            continue\n        pred['feat'].append(feat)\n        pred['t'].append(t)\n        pred['p'].append(p)\n    return pd.DataFrame(pred), pd.DataFrame(not_pred)\n        ","metadata":{"execution":{"iopub.status.busy":"2024-04-24T18:18:41.306538Z","iopub.execute_input":"2024-04-24T18:18:41.307261Z","iopub.status.idle":"2024-04-24T18:18:41.315738Z","shell.execute_reply.started":"2024-04-24T18:18:41.307228Z","shell.execute_reply":"2024-04-24T18:18:41.314656Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"pred, not_pred = feat_t(training_df.drop(['participant', 'depression'], axis = 1), 'gender')\nnot_pred","metadata":{"execution":{"iopub.status.busy":"2024-04-24T18:18:48.621597Z","iopub.execute_input":"2024-04-24T18:18:48.621979Z","iopub.status.idle":"2024-04-24T18:18:48.748583Z","shell.execute_reply.started":"2024-04-24T18:18:48.621950Z","shell.execute_reply":"2024-04-24T18:18:48.747531Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"None of the correlated features are not significantly different between genders so that doesn't help us decide. Will use the ones with the most significant difference between genders.","metadata":{}},{"cell_type":"code","source":"pred","metadata":{"execution":{"iopub.status.busy":"2024-04-24T18:19:37.136841Z","iopub.execute_input":"2024-04-24T18:19:37.137245Z","iopub.status.idle":"2024-04-24T18:19:37.151697Z","shell.execute_reply.started":"2024-04-24T18:19:37.137218Z","shell.execute_reply":"2024-04-24T18:19:37.150396Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"ts = {'feat': [], 't': []}\ncor_feats = list(np.unique(high['feat1'])) + list(np.unique(high['feat2']))\nfor feat in cor_feats:\n    t = pred['t'][pred['feat']==feat]\n    ts['feat'].append(feat)\n    ts['t'].append(t)\nts = pd.DataFrame(ts)","metadata":{"execution":{"iopub.status.busy":"2024-04-23T19:52:42.386254Z","iopub.execute_input":"2024-04-23T19:52:42.386738Z","iopub.status.idle":"2024-04-23T19:52:42.403665Z","shell.execute_reply.started":"2024-04-23T19:52:42.386705Z","shell.execute_reply":"2024-04-23T19:52:42.402312Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"ts","metadata":{"execution":{"iopub.status.busy":"2024-04-23T19:52:44.190857Z","iopub.execute_input":"2024-04-23T19:52:44.191564Z","iopub.status.idle":"2024-04-23T19:52:44.218046Z","shell.execute_reply.started":"2024-04-23T19:52:44.191528Z","shell.execute_reply":"2024-04-23T19:52:44.217143Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"Will remove based on the smallest t value of correlated pairs.","metadata":{}}]}